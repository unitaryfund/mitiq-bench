{"project": "Mitiq", "project_url": "https://github.com/unitaryfund/mitiq", "show_commit_url": "https://github.com/unitaryfund/mitiq/commit/", "hash_length": 8, "revision_to_hash": {"800": "1136118641651f769d0501b8aee47b32d236a890", "1160": "f14caebe328d13aee1c14d87b2a13eff66d48ed2", "1163": "223e6d5943d1e0cbc005e5a9f3a733a021c3fcd0", "1285": "7e68264592ee040297a2719ec3fb3057460debd1", "1387": "3a92c906e70bf6d2a5f29f852b1569c43008648b", "1523": "62b1a804819ae6878bfdac5fcfff01f57eddfbc9", "1732": "c3264c9ce694b53c239de2272914c55d4e4ebf1e", "1871": "6eee6f210f45301ea0964c9c5778ca978d9fce41", "2060": "99c8d7453364c7e664876551ed066e2359f9a01d", "2223": "09bf91ce16689d98cfef3a366637cde2f32c74f3", "2509": "e908778c827d9a9454c1f45f4b0f93f9695a3d89", "2750": "9fa23ad5afb1877fca36c6c376a7bf80f81d5d7b", "3093": "75b89ca184f040d4d3e65832a57907730f982e67", "3143": "704ba56badc82be007dff5bf49a488b5471fedb2", "3214": "e5fd404d1d319b9043d67ca8049535af5e7125fe", "3327": "41e91ebc6a7c62ed97771b63be11a6886cb5d81d", "3851": "63cd394b2c3e3f3a3a2185b0f96790d9884b9b68", "4074": "b1e5cfda16b46817d18745261c4af29be82a5078", "4181": "337062c9d78826a9d3dbdca2d5418d009982656b", "4540": "9128a020722967cf24f22aeefc1507b09c834df4", "4660": "c7f7330d17d89ffdd0ccc08a3e22dc8c91305dc1", "4885": "612595f587652daa4e950f11ddee750b5e65a192", "5070": "103969ef41a1df14b264901d338ac478ca4b8656", "5309": "759cba1c98ef85b984a1e4cdbfb489ffca020dc3", "5494": "0796a379214831b8d54a53ecdfeba8e3a2146174", "5498": "c19857fafc9ea2f5986b75dbced7da73abf9bc57", "5500": "7cfe6d439f5234b76ea94b46eb00178eafca864e", "5519": "73e4ec80523203c0941c86e85b7da6029ef9fcef", "5529": "8fa20aa18755c204bf5e0216c9e723f740f9d75f", "5530": "546baeca5dd1f67ca02374c245f1613c3707679f", "5535": "da6142f3b94017a5ec4635f9703c06db00e913a6", "5546": "754b9b4e4e2f654a7418c7ffc8ee7f581a9d730e", "5556": "681434b9d17f9b7b147853e9235a84eabe112aff"}, "revision_to_date": {"800": 1591288978000, "1160": 1597530330000, "1163": 1597667321000, "1285": 1599072995000, "1387": 1601854491000, "1523": 1604086737000, "1732": 1607288818000, "1871": 1610473970000, "2060": 1612799532000, "2223": 1614626390000, "2509": 1617809045000, "2750": 1620314903000, "3093": 1623948896000, "3143": 1624528568000, "3214": 1625086320000, "3327": 1625650735000, "3851": 1632246837000, "4074": 1635957493000, "4181": 1638207226000, "4540": 1642793115000, "4660": 1645797813000, "4885": 1649253855000, "5070": 1651258991000, "5309": 1654283783000, "5494": 1656605667000, "5498": 1656634153000, "5500": 1656638376000, "5519": 1657061580000, "5529": 1657124709000, "5530": 1657124744000, "5535": 1657149376000, "5546": 1657229205000, "5556": 1657252544000}, "params": {"machine": ["ghrunner"], "python": ["3.8"], "branch": ["master"]}, "graph_param_list": [{"machine": "ghrunner", "python": "3.8", "branch": "master"}], "benchmarks": {"benchmarks.track_pec": {"code": "def track_pec(\n    circuit_type: str,\n    nqubits: int,\n    depth: int,\n    observable: Observable,\n    num_pec_samples: int,\n) -> float:\n    \"\"\"Returns the PEC error mitigation factor, i.e., the ratio\n\n    (error without PEC) / (error with PEC).\n\n    Args:\n        circuit_type: Type of benchmark circuit.\n        nqubits: Number of qubits in the benchmark circuit.\n        depth: Some proxy of depth in the benchmark circuit.\n        observable: Observable to compute the expectation value of.\n        num_pec_samples: Number of circuits to sample/run.\n    \"\"\"\n    circuit = get_benchmark_circuit(circuit_type, nqubits, depth)\n\n    noise_level = 0.01\n    reps = pec.represent_operations_in_circuit_with_local_depolarizing_noise(\n        circuit, noise_level\n    )\n\n    compute_density_matrix = functools.partial(\n        mitiq_cirq.compute_density_matrix,\n        noise_model=cirq.depolarize,\n        noise_level=(noise_level,),\n    )\n\n    true_value = raw.execute(\n        circuit, compute_density_matrix_noiseless, observable\n    )\n    raw_value = raw.execute(circuit, compute_density_matrix, observable)\n    pec_value = pec.execute_with_pec(\n        circuit,\n        compute_density_matrix,\n        observable,\n        representations=reps,\n        num_samples=num_pec_samples,\n    )\n    return np.real(abs(true_value - raw_value) / abs(true_value - pec_value))", "name": "benchmarks.track_pec", "param_names": ["circuit", "nqubits", "depth", "observable", "num_samples"], "params": [["'rb'", "'mirror'"], ["2"], ["1", "5", "10"], ["<mitiq.observable.observable.Observable object>"], ["100"]], "timeout": 300, "type": "track", "unit": "Error mitigation factor", "version": "2032c784a42175922d8a82740bd9b3a00419ba560f5d79afc3e12f78fb45ebe7"}, "benchmarks.track_zne": {"code": "def track_zne(\n    circuit_type: str,\n    nqubits: int,\n    depth: int,\n    observable: Observable,\n) -> float:\n    \"\"\"Returns the ZNE error mitigation factor, i.e., the ratio\n\n    (error without ZNE) / (error with ZNE).\n\n    Args:\n        circuit_type: Type of benchmark circuit.\n        nqubits: Number of qubits in the benchmark circuit.\n        depth: Some proxy of depth in the benchmark circuit.\n        observable: Observable to compute the expectation value of.\n    \"\"\"\n    circuit = get_benchmark_circuit(circuit_type, nqubits, depth)\n\n    true_value = raw.execute(\n        circuit, compute_density_matrix_noiseless, observable\n    )\n    raw_value = raw.execute(\n        circuit, mitiq_cirq.compute_density_matrix, observable\n    )\n    zne_value = zne.execute_with_zne(\n        circuit,\n        mitiq_cirq.compute_density_matrix,\n        observable,\n    )\n    return np.real(abs(true_value - raw_value) / abs(true_value - zne_value))", "name": "benchmarks.track_zne", "param_names": ["circuit", "nqubits", "depth", "observable"], "params": [["'rb'", "'mirror'"], ["2"], ["1", "5", "10"], ["<mitiq.observable.observable.Observable object>"]], "timeout": 300, "type": "track", "unit": "Error mitigation factor", "version": "94a9e532cc24dcdd7ba4d08bf04e48946861949aba92ce77fdf44df7a3c7ef9c"}}, "machines": {"ghrunner": {"machine": "ghrunner", "version": 1}}, "tags": {"v.0.1a2": 1163, "v0.1.0": 1285, "v0.10.0": 3851, "v0.11.0": 4074, "v0.11.1": 4181, "v0.12.0": 4540, "v0.13.0": 4660, "v0.14.0": 4885, "v0.15.0": 5070, "v0.16.0": 5309, "v0.17.0": 5535, "v0.1a1": 800, "v0.1a2": 1160, "v0.2.0": 1387, "v0.3.0": 1523, "v0.4.0": 1732, "v0.4.1": 1871, "v0.5.0": 2060, "v0.6.0": 2223, "v0.7.0": 2509, "v0.8.0": 2750, "v0.9.0": 3093, "v0.9.1": 3143, "v0.9.2": 3214, "v0.9.3": 3327}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}