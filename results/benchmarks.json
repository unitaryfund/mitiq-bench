{
    "benchmarks.track_pec": {
        "code": "def track_pec(\n    circuit_type: str,\n    nqubits: int,\n    depth: int,\n    observable: Observable,\n    num_pec_samples: int,\n) -> float:\n    \"\"\"Returns the PEC error mitigation factor, i.e., the ratio\n\n    (error without PEC) / (error with PEC).\n\n    Args:\n        circuit_type: Type of benchmark circuit.\n        nqubits: Number of qubits in the benchmark circuit.\n        depth: Some proxy of depth in the benchmark circuit.\n        observable: Observable to compute the expectation value of.\n        num_pec_samples: Number of circuits to sample/run.\n    \"\"\"\n    circuit = get_benchmark_circuit(circuit_type, nqubits, depth)\n\n    noise_level = 0.01\n    reps = pec.represent_operations_in_circuit_with_local_depolarizing_noise(\n        circuit, noise_level\n    )\n\n    compute_density_matrix = functools.partial(\n        mitiq_cirq.compute_density_matrix,\n        noise_model=cirq.depolarize,\n        noise_level=(noise_level,),\n    )\n\n    true_value = raw.execute(\n        circuit, compute_density_matrix_noiseless, observable\n    )\n    raw_value = raw.execute(circuit, compute_density_matrix, observable)\n    pec_value = pec.execute_with_pec(\n        circuit,\n        compute_density_matrix,\n        observable,\n        representations=reps,\n        num_samples=num_pec_samples,\n    )\n    return np.real(abs(true_value - raw_value) / abs(true_value - pec_value))",
        "name": "benchmarks.track_pec",
        "param_names": [
            "circuit",
            "nqubits",
            "depth",
            "observable",
            "num_samples"
        ],
        "params": [
            [
                "'rb'",
                "'mirror'"
            ],
            [
                "2"
            ],
            [
                "1",
                "5",
                "10"
            ],
            [
                "<mitiq.observable.observable.Observable object>"
            ],
            [
                "100"
            ]
        ],
        "timeout": 300,
        "type": "track",
        "unit": "Error mitigation factor",
        "version": "2032c784a42175922d8a82740bd9b3a00419ba560f5d79afc3e12f78fb45ebe7"
    },
    "benchmarks.track_zne": {
        "code": "def track_zne(\n    circuit_type: str,\n    nqubits: int,\n    depth: int,\n    observable: Observable,\n) -> float:\n    \"\"\"Returns the ZNE error mitigation factor, i.e., the ratio\n\n    (error without ZNE) / (error with ZNE).\n\n    Args:\n        circuit_type: Type of benchmark circuit.\n        nqubits: Number of qubits in the benchmark circuit.\n        depth: Some proxy of depth in the benchmark circuit.\n        observable: Observable to compute the expectation value of.\n    \"\"\"\n    circuit = get_benchmark_circuit(circuit_type, nqubits, depth)\n\n    true_value = raw.execute(\n        circuit, compute_density_matrix_noiseless, observable\n    )\n    raw_value = raw.execute(\n        circuit, mitiq_cirq.compute_density_matrix, observable\n    )\n    zne_value = zne.execute_with_zne(\n        circuit,\n        mitiq_cirq.compute_density_matrix,\n        observable,\n    )\n    return np.real(abs(true_value - raw_value) / abs(true_value - zne_value))",
        "name": "benchmarks.track_zne",
        "param_names": [
            "circuit",
            "nqubits",
            "depth",
            "observable"
        ],
        "params": [
            [
                "'rb'",
                "'mirror'"
            ],
            [
                "2"
            ],
            [
                "1",
                "5",
                "10"
            ],
            [
                "<mitiq.observable.observable.Observable object>"
            ]
        ],
        "timeout": 300,
        "type": "track",
        "unit": "Error mitigation factor",
        "version": "94a9e532cc24dcdd7ba4d08bf04e48946861949aba92ce77fdf44df7a3c7ef9c"
    },
    "version": 2
}